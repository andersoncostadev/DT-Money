{"ast":null,"code":"var _jsxFileName = \"D:\\\\ignite\\\\dtmoney\\\\src\\\\TransactionContext.tsx\",\n    _s = $RefreshSig$();\n\nimport { createContext, useEffect, useState } from 'react';\nimport { api } from './services/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const TransactionContext = /*#__PURE__*/createContext({});\nexport function TransactionProvider(_ref) {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const [transactions, setTransactions] = useState([]);\n  useEffect(() => {\n    api.get('transactions').then(response => setTransactions(response.data.transactions));\n  }, []);\n\n  function createTransaction(transaction) {\n    api.post('/transactions', transaction);\n  }\n\n  return /*#__PURE__*/_jsxDEV(TransactionContext.Provider, {\n    value: {\n      transactions,\n      createTransaction\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n}\n\n_s(TransactionProvider, \"tSC852gg/pAfbHr6jYEePbawnUU=\");\n\n_c = TransactionProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"TransactionProvider\");","map":{"version":3,"names":["createContext","useEffect","useState","api","TransactionContext","TransactionProvider","children","transactions","setTransactions","get","then","response","data","createTransaction","transaction","post"],"sources":["D:/ignite/dtmoney/src/TransactionContext.tsx"],"sourcesContent":["import { createContext, ReactNode, useEffect, useState } from 'react';\r\nimport { api } from './services/api';\r\n\r\ninterface Transaction {\r\n  id: number;\r\n  title: string;\r\n  amount: number;\r\n  type: string;\r\n  category: string;\r\n  createdAt: string;\r\n}\r\n\r\ntype TransactionInput = Omit<Transaction, 'id' | 'createdAt'>;\r\n\r\ninterface TransactionProviderProps {\r\n  children: ReactNode;\r\n}\r\n\r\ninterface TransactionsContextData {\r\n  transactions: Transaction[];\r\n  createTransaction: (transaction: TransactionInput) => void;\r\n}\r\n\r\nexport const TransactionContext = createContext<TransactionsContextData>(\r\n  {} as TransactionsContextData\r\n);\r\n\r\nexport function TransactionProvider({ children }: TransactionProviderProps) {\r\n  const [transactions, setTransactions] = useState<Transaction[]>([]);\r\n\r\n  useEffect(() => {\r\n    api.get('transactions')\r\n      .then(response => setTransactions(response.data.transactions))\r\n  }, []);\r\n\r\n  function createTransaction(transaction: TransactionInput) {\r\n    api.post('/transactions', transaction)\r\n  }\r\n\r\n  return (\r\n    <TransactionContext.Provider value={{ transactions, createTransaction }}>\r\n      {children}\r\n    </TransactionContext.Provider>\r\n  )\r\n}"],"mappings":";;;AAAA,SAASA,aAAT,EAAmCC,SAAnC,EAA8CC,QAA9C,QAA8D,OAA9D;AACA,SAASC,GAAT,QAAoB,gBAApB;;AAsBA,OAAO,MAAMC,kBAAkB,gBAAGJ,aAAa,CAC7C,EAD6C,CAAxC;AAIP,OAAO,SAASK,mBAAT,OAAqE;EAAA;;EAAA,IAAxC;IAAEC;EAAF,CAAwC;EAC1E,MAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCN,QAAQ,CAAgB,EAAhB,CAAhD;EAEAD,SAAS,CAAC,MAAM;IACdE,GAAG,CAACM,GAAJ,CAAQ,cAAR,EACGC,IADH,CACQC,QAAQ,IAAIH,eAAe,CAACG,QAAQ,CAACC,IAAT,CAAcL,YAAf,CADnC;EAED,CAHQ,EAGN,EAHM,CAAT;;EAKA,SAASM,iBAAT,CAA2BC,WAA3B,EAA0D;IACxDX,GAAG,CAACY,IAAJ,CAAS,eAAT,EAA0BD,WAA1B;EACD;;EAED,oBACE,QAAC,kBAAD,CAAoB,QAApB;IAA6B,KAAK,EAAE;MAAEP,YAAF;MAAgBM;IAAhB,CAApC;IAAA,UACGP;EADH;IAAA;IAAA;IAAA;EAAA,QADF;AAKD;;GAjBeD,mB;;KAAAA,mB"},"metadata":{},"sourceType":"module"}